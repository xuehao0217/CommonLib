<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />

    <uses-permission android:name="android.permission.READ_CALENDAR" />
    <uses-permission android:name="android.permission.WRITE_CALENDAR" />

    <!-- https://github.com/getActivity/XXPermissions-->
    <!--需要注意的是：这个选项是框架用于判断当前项目是否适配了分区存储，需要注意的是，如果你的项目已经适配了分区存储特性，
    可以使用 READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE 来申请权限，如果你的项目还没有适配分区特性，
    就算申请了 READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE 权限也会导致无法正常读取外部存储上面的文件，
    如果你的项目没有适配分区存储，请使用 MANAGE_EXTERNAL_STORAGE 来申请权限，这样才能正常读取外部存储上面的文件-->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <!--    举个最简单的例子，Android 11 出现的 MANAGE_EXTERNAL_STORAGE 新权限，
    如果是在 Android 10 及以下的设备申请这个权限时，框架会自动添加 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE 进行申请，
    在 Android 10 及以下的设备上面，我们可以直接把 MANAGE_EXTERNAL_STORAGE 当做 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE 来用，
    因为 MANAGE_EXTERNAL_STORAGE 能干的事情，在 Android 10 及以下的设备上面，要用 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE 才能做得了。-->

    <!--  所以大家在使用 XXPermissions 的时候，直接拿新的权限去申请就可以了，
    完全不需要关心新旧权限的兼容问题，框架会自动帮你做处理的，与其他框架不同的是
    ，我更想做的是让大家一句代码搞定权限请求，框架能做到的，统统交给框架做处理。-->

    <!-- 如果你同时申请了 MANAGE_EXTERNAL_STORAGE、READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE 这三个权限，框架会抛出异常，
    告诉你不要同时申请这三个权限，这是因为在 Android 11 及以上设备上面，申请了 MANAGE_EXTERNAL_STORAGE 权限，
    则没有申请 READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE 权限的必要，这是因为申请了 MANAGE_EXTERNAL_STORAGE 权限，
    就等于拥有了比 READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE 更加强大的能力
    ，如果硬要那么做反而适得其反，假设框架允许的情况下，会同时出现两种授权方式，一种是弹窗授权，另一种是跳页面授权，用户要进行两次授权
    ，但是实际上面有了 MANAGE_EXTERNAL_STORAGE 权限就满足使用了，这个时候大家可能心中有一个疑问了，你不申请 READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE 权限，
    Android 11 以下又没有 MANAGE_EXTERNAL_STORAGE 这个权限，那不是会有问题？关于这个问题大家可以放心，框架会做判断，如果你申请了 MANAGE_EXTERNAL_STORAGE 权限，
    在 Android 11 以下框架会自动添加 READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE 来申请，所以在低版本下也不会因为没有权限导致的无法使用。-->
    <uses-permission
        android:name="android.permission.MANAGE_EXTERNAL_STORAGE"
        tools:ignore="ScopedStorage" />


    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
    <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" />
    <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />


    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" />
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />


    <!-- 告知 XXPermissions 当前项目已经适配了分区存储特性 -->
    <!--如果当前项目在没有适配分区存储的情况下，申请 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE 权限,
    当项目的 targetSdkVersion >= 29 时，需要在清单文件中注册 android:requestLegacyExternalStorage="true" 属性，
    否则框架会抛出异常，如果不加会导致一个问题，明明已经获取到存储权限，但是无法在 Android 10 的设备上面正常读写外部存储上的文件。
  当项目的 targetSdkVersion >= 30 时，则不能申请 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE 权限，而是应该申请 MANAGE_EXTERNAL_STORAGE 权限
  如果当前项目已经适配了分区存储，那么只需要在清单文件中注册一个 meta-data 属性即可： <meta-data android:name="ScopedStorage" android:value="true" />-->
    <meta-data
        android:name="ScopedStorage"
        android:value="true" />

    <application
        android:allowBackup="true"
        android:networkSecurityConfig="@xml/network_security_config"
        android:requestLegacyExternalStorage="true"
        android:resizeableActivity="false"
        android:supportsRtl="true"
        android:usesCleartextTraffic="true">
        <meta-data
            android:name="android.max_aspect"
            android:value="2.4" />

        <!--适配华为（huawei）刘海屏-->
        <meta-data
            android:name="android.notch_support"
            android:value="true" />
        <!--适配小米（xiaomi）刘海屏-->
        <meta-data
            android:name="notch.config"
            android:value="portrait|landscape" />

        <activity android:name="com.xueh.comm_core.web.WebViewActivity" />
        <activity android:name="com.xueh.comm_core.web.WebViewComposeActivity" />
    </application>

</manifest>